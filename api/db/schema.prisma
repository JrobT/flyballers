datasource db {
  provider  = "postgres"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id        Int      @id @default(autoincrement())
  club      Club     @relation(fields: [clubId], references: [id])
  clubId    Int
  createdAt DateTime @default(now())
  email     String   @unique @db.VarChar(255)
  name      String?  @db.VarChar(255)
  photoUrl  String?

  @@index([clubId])
  @@index([email])
}

model Club {
  id      Int      @id @default(autoincrement())
  contact Contact?
  events  Event[]
  members User[]
  name    String   @db.VarChar(255)

  @@index([name])
}

model Contact {
  id     Int    @id @default(autoincrement())
  club   Club   @relation(fields: [clubId], references: [id])
  clubId Int    @unique
  email  String @db.VarChar(255)
  name   String @db.VarChar(255)

  @@index([email])
}

model Event {
  id        Int        @id @default(autoincrement())
  address   Address    @relation(fields: [addressId], references: [id])
  addressId Int
  closeDate DateTime?
  club      Club       @relation(fields: [clubId], references: [id])
  clubId    Int
  entryFee  Float
  eventDays EventDay[]
  name      String     @db.VarChar(255)
  notes     String     @db.VarChar(255)
  openDate  DateTime
  surface   Surface    @relation(fields: [surfaceId], references: [id])
  surfaceId Int

  @@index([addressId])
  @@index([clubId])
  @@index([name])
}

model Address {
  id          Int         @id @default(autoincrement())
  city        String      @db.VarChar(255)
  coordinates Coordinate?
  events      Event[]
  postalCode  String      @db.VarChar(255)
  street      String      @db.VarChar(255)
  what3words  String?     @db.VarChar(255)

  @@index([postalCode])
}

model Coordinate {
  id        Int     @id @default(autoincrement())
  address   Address @relation(fields: [addressId], references: [id])
  addressId Int     @unique
  latitude  Float
  longitude Float

  @@index([addressId])
}

model Surface {
  id     Int     @id @default(autoincrement())
  events Event[]
  name   String  @db.VarChar(255)
}

model EventDay {
  id       Int       @id @default(autoincrement())
  date     DateTime
  eventId  Int
  event    Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  schedule Schedule?

  @@index([date])
  @@index([eventId])
}

model Schedule {
  id         Int      @id @default(autoincrement())
  eventDay   EventDay @relation(fields: [eventDayId], references: [id])
  eventDayId Int      @unique
  races      Race[]

  @@index([eventDayId])
}

enum Class {
  FOUNDATION
  OPEN
}

enum Type {
  SINGLES
  TEAMS
}

model Race {
  id         Int      @id @default(autoincrement())
  class      Class
  division   Int      @db.SmallInt
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId Int
  team1      String   @db.VarChar(255)
  team2      String   @db.VarChar(255)
  type       Type

  @@index([class])
  @@index([team1])
  @@index([team2])
  @@index([type])
}
